// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SavingAccount_BE.Data;

#nullable disable

namespace SavingAccount_BE.Migrations
{
    [DbContext(typeof(SavingAccountDbContext))]
    [Migration("20241025160601_AddIdentityAuthentication")]
    partial class AddIdentityAuthentication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SavingAccount_BE.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Card", b =>
                {
                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Base64Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCard");

                    b.ToTable("Card", (string)null);

                    b.HasData(
                        new
                        {
                            IdCard = "1",
                            Balance = 1000.0,
                            CardNumber = "123456",
                            DateOpened = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameOfCard = "Visa",
                            TypeCard = "Credit"
                        },
                        new
                        {
                            IdCard = "2",
                            Balance = 5000.0,
                            CardNumber = "789012",
                            DateOpened = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameOfCard = "MasterCard",
                            TypeCard = "Debit"
                        },
                        new
                        {
                            IdCard = "3",
                            Balance = 5000.0,
                            CardNumber = "789045",
                            DateOpened = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameOfCard = "The Ghi No",
                            TypeCard = "Debit"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.CardHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdCard");

                    b.HasIndex("IdHistory");

                    b.ToTable("CardHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdCard = "1",
                            IdHistory = "7"
                        },
                        new
                        {
                            Id = 2,
                            IdCard = "1",
                            IdHistory = "8"
                        },
                        new
                        {
                            Id = 3,
                            IdCard = "2",
                            IdHistory = "9"
                        },
                        new
                        {
                            Id = 4,
                            IdCard = "3",
                            IdHistory = "11"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.History", b =>
                {
                    b.Property<string>("IdHistory")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Change")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTransfer")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHistory");

                    b.ToTable("History", (string)null);

                    b.HasData(
                        new
                        {
                            IdHistory = "1",
                            Change = 300.0,
                            DateTransfer = new DateTime(2024, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "2",
                            Change = -200.0,
                            DateTransfer = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "3",
                            Change = 500.0,
                            DateTransfer = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "4",
                            Change = 300.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "5",
                            Change = -300.0,
                            DateTransfer = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "6",
                            Change = 800.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "7",
                            Change = 800.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "8",
                            Change = 800.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "9",
                            Change = -800.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "10",
                            Change = -800.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "11",
                            Change = -800.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Notification", b =>
                {
                    b.Property<string>("IdNotification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNotification");

                    b.ToTable("Notification", (string)null);

                    b.HasData(
                        new
                        {
                            IdNotification = "1",
                            Content = "Content1"
                        },
                        new
                        {
                            IdNotification = "2",
                            Content = "Content2"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.SavingAccount", b =>
                {
                    b.Property<string>("IdSavingAccount")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("NameOfSavingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Withdraw")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("IdSavingAccount");

                    b.ToTable("SavingAccount", (string)null);

                    b.HasData(
                        new
                        {
                            IdSavingAccount = "1",
                            Balance = 300000.0,
                            DateOpened = new DateTime(2022, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposits = 0.0,
                            NameOfSavingAccount = "VKT",
                            Term = "3 months",
                            Withdraw = 0.0
                        },
                        new
                        {
                            IdSavingAccount = "2",
                            Balance = 500000.0,
                            DateOpened = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposits = 0.0,
                            NameOfSavingAccount = "VKT",
                            Term = "6 months",
                            Withdraw = 0.0
                        },
                        new
                        {
                            IdSavingAccount = "3",
                            Balance = 500000.0,
                            DateOpened = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposits = 0.0,
                            NameOfSavingAccount = "LPT",
                            Term = "6 months",
                            Withdraw = 0.0
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.SavingAccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSavingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdHistory");

                    b.HasIndex("IdSavingAccount");

                    b.ToTable("SavingAccountHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdHistory = "2",
                            IdSavingAccount = "1"
                        },
                        new
                        {
                            Id = 2,
                            IdHistory = "5",
                            IdSavingAccount = "1"
                        },
                        new
                        {
                            Id = 3,
                            IdHistory = "6",
                            IdSavingAccount = "1"
                        },
                        new
                        {
                            Id = 4,
                            IdHistory = "4",
                            IdSavingAccount = "2"
                        },
                        new
                        {
                            Id = 5,
                            IdHistory = "10",
                            IdSavingAccount = "3"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.User", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Base64Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Friend")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEndable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStampHash")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue(" ");

                    b.Property<bool>("TwoFactorEndable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserIdUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdUser");

                    b.HasIndex("UserIdUser");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            IdUser = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CCCD = "001",
                            City = "Hà Nội",
                            Email = "john@example.com",
                            EmailConfirmed = true,
                            FullName = "John Doe",
                            LockoutEndable = false,
                            Nation = "Việt Nam",
                            PasswordHash = "$2a$10$B4BKHIe7D5aVXyceF8fmx.hq/akO3kqqEWHJ9mCQnrPi5P7HhMO7G",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Province = "Hà Nội",
                            SecurityStampHash = "abc123",
                            TwoFactorEndable = false
                        },
                        new
                        {
                            IdUser = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1992, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CCCD = "002",
                            City = "Hồ Chí Minh",
                            Email = "jane@example.com",
                            EmailConfirmed = true,
                            FullName = "Jane Smith",
                            LockoutEndable = false,
                            Nation = "Việt Nam",
                            PasswordHash = "$2a$10$B4BKHIe7D5aVXyceF8fmx.hq/akO3kqqEWHJ9mCQnrPi5P7HhMO7G",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            Province = "Hồ Chí Minh",
                            SecurityStampHash = "xyz456",
                            TwoFactorEndable = false
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.UserCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdCard");

                    b.HasIndex("IdUser");

                    b.ToTable("UserCard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdCard = "1",
                            IdUser = "1"
                        },
                        new
                        {
                            Id = 2,
                            IdCard = "2",
                            IdUser = "2"
                        },
                        new
                        {
                            Id = 3,
                            IdCard = "3",
                            IdUser = "1"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdNotification")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdNotification");

                    b.HasIndex("IdUser");

                    b.ToTable("UserNotification", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdNotification = "1",
                            IdUser = "1"
                        },
                        new
                        {
                            Id = 2,
                            IdNotification = "2",
                            IdUser = "2"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.UserSavingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdSavingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdSavingAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("UserSavingAccount", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdSavingAccount = "1",
                            IdUser = "1"
                        },
                        new
                        {
                            Id = 2,
                            IdSavingAccount = "2",
                            IdUser = "1"
                        },
                        new
                        {
                            Id = 3,
                            IdSavingAccount = "3",
                            IdUser = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SavingAccount_BE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SavingAccount_BE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavingAccount_BE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SavingAccount_BE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SavingAccount_BE.Model.CardHistory", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.Card", "Card")
                        .WithMany("CardHistories")
                        .HasForeignKey("IdCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavingAccount_BE.Model.History", "History")
                        .WithMany("CardHistories")
                        .HasForeignKey("IdHistory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("History");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.SavingAccountHistory", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.History", "History")
                        .WithMany("SavingAccountHistories")
                        .HasForeignKey("IdHistory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavingAccount_BE.Model.SavingAccount", "SavingAccount")
                        .WithMany("SavingAccountHistories")
                        .HasForeignKey("IdSavingAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("SavingAccount");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.User", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.User", null)
                        .WithMany("Relatives")
                        .HasForeignKey("UserIdUser");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.UserCard", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.Card", "Card")
                        .WithMany("UserCards")
                        .HasForeignKey("IdCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavingAccount_BE.Model.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.UserNotification", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.Notification", "Notification")
                        .WithMany("userNotifications")
                        .HasForeignKey("IdNotification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavingAccount_BE.Model.User", "User")
                        .WithMany("userNotifications")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.UserSavingAccount", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.SavingAccount", "SavingAccount")
                        .WithMany("UserSavingAccounts")
                        .HasForeignKey("IdSavingAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavingAccount_BE.Model.User", "User")
                        .WithMany("UserSavingAccounts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SavingAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Card", b =>
                {
                    b.Navigation("CardHistories");

                    b.Navigation("UserCards");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.History", b =>
                {
                    b.Navigation("CardHistories");

                    b.Navigation("SavingAccountHistories");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Notification", b =>
                {
                    b.Navigation("userNotifications");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.SavingAccount", b =>
                {
                    b.Navigation("SavingAccountHistories");

                    b.Navigation("UserSavingAccounts");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.User", b =>
                {
                    b.Navigation("Relatives");

                    b.Navigation("UserCards");

                    b.Navigation("UserSavingAccounts");

                    b.Navigation("userNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
