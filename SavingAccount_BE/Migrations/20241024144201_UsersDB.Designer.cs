// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SavingAccount_BE.Data;

#nullable disable

namespace SavingAccount_BE.Migrations
{
    [DbContext(typeof(SavingAccountDbContext))]
    [Migration("20241024144201_UsersDB")]
    partial class UsersDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SavingAccount_BE.Model.Card", b =>
                {
                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Base64Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameOfCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCard");

                    b.HasIndex("IdHistory");

                    b.ToTable("Card", (string)null);

                    b.HasData(
                        new
                        {
                            IdCard = "1",
                            Balance = 200000.0,
                            CardNumber = "000001",
                            DateOpened = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdHistory = "1",
                            NameOfCard = "The tin dung",
                            TypeCard = "Tin dung"
                        },
                        new
                        {
                            IdCard = "2",
                            Balance = 500000.0,
                            CardNumber = "000002",
                            DateOpened = new DateTime(2021, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdHistory = "3",
                            NameOfCard = "The tin dung",
                            TypeCard = "Tin dung"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.History", b =>
                {
                    b.Property<string>("IdHistory")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Change")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTransfer")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHistory");

                    b.ToTable("History", (string)null);

                    b.HasData(
                        new
                        {
                            IdHistory = "1",
                            Change = 300.0,
                            DateTransfer = new DateTime(2024, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "2",
                            Change = -200.0,
                            DateTransfer = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "3",
                            Change = 500.0,
                            DateTransfer = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        },
                        new
                        {
                            IdHistory = "4",
                            Change = 300.0,
                            DateTransfer = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Transfer"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Notification", b =>
                {
                    b.Property<string>("IdNotification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNotification");

                    b.ToTable("Notification", (string)null);

                    b.HasData(
                        new
                        {
                            IdNotification = "1",
                            Content = "Day la VKT"
                        },
                        new
                        {
                            IdNotification = "2",
                            Content = "Day la LPT"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.SavingAccount", b =>
                {
                    b.Property<string>("IdSavingAccount")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameOfSavingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSavingAccount");

                    b.HasIndex("IdHistory");

                    b.ToTable("SavingAccount", (string)null);

                    b.HasData(
                        new
                        {
                            IdSavingAccount = "1",
                            Balance = 300000.0,
                            DateOpened = new DateTime(2022, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdHistory = "2",
                            NameOfSavingAccount = "VKT",
                            Term = "3 months"
                        },
                        new
                        {
                            IdSavingAccount = "2",
                            Balance = 500000.0,
                            DateOpened = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdHistory = "4",
                            NameOfSavingAccount = "LPT",
                            Term = "6 months"
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Base64Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Friend")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdNotification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSavingAccount")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEndable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStampHash")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue(" ");

                    b.Property<bool>("TwoFactorEndable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("Friend");

                    b.HasIndex("IdCard");

                    b.HasIndex("IdNotification");

                    b.HasIndex("IdSavingAccount");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CCCD = "215913523",
                            City = "Quy Nhon",
                            Email = "KTeightop1512@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Vo Khac Thien",
                            IdCard = "1",
                            IdNotification = "1",
                            IdSavingAccount = "1",
                            LockoutEndable = false,
                            Nation = "Viet Nam",
                            PasswordHash = "$2y$10$KBvSdRCHLCo6DHHq5kSiiemIOFbKVAQMVeZr5ulfAPiWpQtSeAYD2",
                            PhoneNumber = "0905647832",
                            PhoneNumberConfirmed = false,
                            Province = "Binh Dinh",
                            TwoFactorEndable = false
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CCCD = "215913524",
                            City = "Quang Ngai",
                            Email = "lephucthuan8@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Le Phuc Thuan",
                            IdCard = "2",
                            IdNotification = "2",
                            IdSavingAccount = "2",
                            LockoutEndable = false,
                            Nation = "Viet Nam",
                            PasswordHash = "$2y$10$KBvSdRCHLCo6DHHq5kSiiemIOFbKVAQMVeZr5ulfAPiWpQtSeAYD2",
                            PhoneNumber = "113",
                            PhoneNumberConfirmed = false,
                            Province = "Quang Ngai",
                            TwoFactorEndable = false
                        });
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Card", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.History", "History")
                        .WithMany("Cards")
                        .HasForeignKey("IdHistory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.SavingAccount", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.History", "History")
                        .WithMany("SavingAccounts")
                        .HasForeignKey("IdHistory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.User", b =>
                {
                    b.HasOne("SavingAccount_BE.Model.User", "Users")
                        .WithMany("Relatives")
                        .HasForeignKey("Friend")
                        .HasPrincipalKey("Email");

                    b.HasOne("SavingAccount_BE.Model.Card", "Card")
                        .WithMany("Users")
                        .HasForeignKey("IdCard");

                    b.HasOne("SavingAccount_BE.Model.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("IdNotification");

                    b.HasOne("SavingAccount_BE.Model.SavingAccount", "SavingAccount")
                        .WithMany("Users")
                        .HasForeignKey("IdSavingAccount");

                    b.Navigation("Card");

                    b.Navigation("Notification");

                    b.Navigation("SavingAccount");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Card", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.History", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("SavingAccounts");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.SavingAccount", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SavingAccount_BE.Model.User", b =>
                {
                    b.Navigation("Relatives");
                });
#pragma warning restore 612, 618
        }
    }
}
